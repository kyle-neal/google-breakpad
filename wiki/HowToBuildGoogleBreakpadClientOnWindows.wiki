This page will guide you through the process of creation of a google-breakpad SVN client, generation of the Visual Studio solution and project files, building, running, and debugging of the CrashGenerationServer and the client unittests.

= Introduction =

This is just one way to do this and requires a Windows and a Goobunu workstation.

= Details =

 # Create an SVN client of google-breakpad on a filer share.  For the purposes of this example, I'm assuming that your homedir is on a filer share.  The main idea here is to see the code on both you Windows workstation and your Goobuntu workstation.
  * On your Goobuntu workstation, execute the following commands:
{{{
    cd ~/src
    mkdir google-breakpad-filer
    svn checkout https://google-breakpad.googlecode.com/svn/trunk/ google-breakpad-filer --username ivan.penkov@gmail.com
    configure-google-breakpad.sh
    make
    make check
}}}
 # Generate MS Visual Studio solution and project files:
  * On your Windows workstation, execute the following commands:
{{{
    Start an elevated CMD (administrator)
    map your filer share (map drive Y:)
    pushd Y:\src\google-breakpad-filer\src\client\windows
    ..\..\tools\gyp\gyp.bat breakpad_client.gyp
}}}
 # Build your project.  For this step you need to have the MS Visual Studio installed (Express should work, I think, although this has been tested only with Professional):
  * Open Y:\src\google-breakpad-filer\src\client\windows\breakpad_client.sln in Visual Studio and allow it to convert it to the latest project file format.  No need to backup the generated project files.
  * Once, the conversion is complete, ready try to build the solution, by building the "build_all" project from the solution explorer.  The build will fail, and the first error will be the following:
{{{
10>Z:\src\google-breakpad-filer\src\testing\include\gmock/gmock-matchers.h(410): error C2027: use of undefined type 'std::tr1::tuple_element<_Idx,_Tuple>'
10>          with
10>          [
10>              _Idx=0,
10>              _Tuple=std::tr1::tuple<testing::Matcher<const google_breakpad::ClientInfo *>>
10>          ]
}}}
   * To work around this build error:
    * Edit the "gtest" project setting. Right click on "gtest", select Properties, then Configuration Settings --> C/C++ --> Preprocessor --> Preprocessor Definitions, and add the following define to the compiler/linker parameters: GTEST_USE_OWN_TR1_TUPLE=0.
    * Do the same for the "clients_test" project.
    * Then, right click "build_all" and select "Rebuild".
    * This is known issue, and it is explained here: [http://code.google.com/p/googletest/issues/detail?id=217&can=1&q=2010]
 # There is another issue that may prevent you from building on Windows.  I expect this to be fixed soon, but in the meantime here is how to detect the issue and fix work around it.  Basically, for the time being, google-breakpad uses a slightly older version gtest which is not compatible with the Microsoft compiler.
   * If you see the following error:
{{{
3>Z:\src\google-breakpad-filer\src\testing\gtest\include\gtest/internal/gtest-tuple.h(725): error C3855: 'std::tr1::tuple_element': template parameter '_Idx' is incompatible with the declaration
}}}
   * You need to apply the following patch to src/testing/gtest/include/gtest/internal/gtest-tuple.h
    * Replace this:
{{{
template <int k, class Tuple>
struct tuple_element {
  typedef typename gtest_internal::TupleElement<
      k < (tuple_size<Tuple>::value), k, Tuple>::type type;
};

#define GTEST_TUPLE_ELEMENT_(k, Tuple) typename tuple_element<k, Tuple >::type
}}}
    * with this:
{{{
namespace gtest_internal {

template <int k, class Tuple>
struct tuple_element {
  typedef typename TupleElement<
      k < (tuple_size<Tuple>::value), k, Tuple>::type type;
};

} //namespace gtest_internal

#define GTEST_TUPLE_ELEMENT_(k, Tuple) \
    typename gtest_internal::tuple_element<k, Tuple >::type
}}}
 # Run/debug the client unittests:
   * To run the tests:
    * Right click on the "client_tests" project and select "Mark as startup project".
    * Use Ctrl-F5 to run all client tests  --> If you see {{{"[  PASSED  ] 22 tests."}}} then everything is fine.
   * To debug, start the tests in the debugger by clicking F5.
 # Once you are done working on the Windows client code, you can go back to your Goobuntu workstation, run all google-breakpad unittests to make sure nothing is regressed on the Linux side and submit your changes for a code review.