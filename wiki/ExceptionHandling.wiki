#summary Overview of exception handling in Breakpad.

= Basics =
Exception handling is a machanism designed to handle the occurance of exceptions, special conditions that change the normal flow of program exectution.

{{{SetUnhandledExceptionFilter}}} replaces all unhandled exceptions when Crash is enabled.
TODO: More on first and second change and vectored v. __try/__catch.

There are two main types of exceptions across all platforms: in-process and out-of-process.

= In-Process =
It is generally considered unsafe to write a minidump from a crashed process.  For example, key data structures could be corrupted or the stack on which the exception handler runs could have been overwritten.  For this reason all platforms also support  out-of-process exception handling.

== Windows ==
In-process exception handling Crash creates a 'handler head' that waits infinitely on a semaphore at start up.  When this thread is woken it writes the minidump and signals to the excepting thread that it may continue.  A filter will tell the OS to kill the process if the minidump is written successfully.  Otherwise it continues.

= Out-of-Process =
Out-of-process exception handling is more complicated than in-process exception handling.

== Windows ==
Crash uses two abstractions around the exception handler to make things work: {{{CrashGenerationServer}}} and {{{CrashGenerationClient}}}.  The constructor for these takes a named pipe name.

During server startup a named pipe and registers callbacks for client connections are created.  The named pipe is used for registration and all IO on the pipe is done asynchronously.  {{{OnPipeConnected}}} is called when a client attempts to connect (call {{{CreateFile}}} on the pipe).  {{{OnPipeConnected}}} does the state machine transistion from {{{Initial}}} to {{{Connecting}}} and on through {{{Reading}}}, {{{Reading_Done}}}, {{{Writing}}}, {{{Writing_Done}}}, {{{Reading_ACK}}}, and {{{Disconnecting}}}.

When registering callbacks, the client passes in two pointers to pointers:
  # A pointer to the {{{EXCEPTION_INFO}}} pointer
  # A pointer to the  {{{MDRawAssertionInfo}}} which handles various non-exception failures like assertions

